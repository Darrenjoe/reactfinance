{"version":3,"sources":["utils/RecordsAPI.js","compoents/Record.js","compoents/RecordForm.js","compoents/AmountBox.js","compoents/Records.js","serviceWorker.js","index.js"],"names":["api","process","REACT_APP_RECORDS_API_URL","Record","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","edit","setState","event","_this2","preventDefault","id","body","record","date","refs","value","title","amount","Number","parseInt","props","Axios","put","concat","then","response","handleEditRecord","data","catch","error","console","log","message","delete","handleDeleteRecord","react_default","a","createElement","className","onClick","handleToggle","bind","type","defaultValue","ref","handleEdit","recordForm","recordRow","Component","RecordFrom","name","obj","target","post","handleNewRecord","onSubmit","handleSubmit","onChange","handleChange","placeholder","disabled","valid","AmountBox","_ref","text","Records","isLoad","records","get","toConsumableArray","recordIndex","indexOf","newRecords","map","item","index","objectSpread","filter","credits","reduce","prev","curr","debits","recordsComponent","_this3","_this$state","Record_Record","key","updateRecord","deleteRecord","compoents_AmountBox","balance","RecordForm_RecordFrom","addRecord","Boolean","window","location","hostname","match","ReactDOM","render","Records_Records","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c94b42d8.chunk.js","sourcesContent":["import Axios from \"axios\";\r\n\r\nexport const api = process.env.REACT_APP_RECORDS_API_URL || \"https://5bf7c3745cd31800137928d8.mockapi.io\"\r\n\r\nexport const getAll = () => \r\n  Axios.get(`${api}/records`)\r\n\r\nexport const create = (body) =>\r\n  Axios.post(`${api}/records`, body)\r\n\r\nexport const update = (id, body) =>\r\n  Axios.put(`${api}/records/${id}`, body)\r\n\r\nexport const remove = (id) =>\r\n  Axios.delete(`${api}/records/${id}`)\r\n","import React, { Component } from 'react';\r\nimport * as RecordsAPI from '../utils/RecordsAPI';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Record extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      edit: false\r\n    };\r\n  }\r\n  \r\n  handleToggle() {\r\n    this.setState({\r\n      edit: !this.state.edit\r\n    });\r\n  }\r\n\r\n  handleEdit(event) {\r\n    event.preventDefault();\r\n    const record = {\r\n      date: this.refs.date.value,\r\n      title: this.refs.title.value,\r\n      amount: Number.parseInt(this.refs.amount.value, 0)\r\n    }\r\n    RecordsAPI.update(this.props.record.id, record).then(\r\n      response => {\r\n        this.props.handleEditRecord(this.props.record, response.data);\r\n        this.setState({edit: false})\r\n      }\r\n    ).catch(\r\n      error => console.log(error.message)\r\n    )\r\n  }\r\n\r\n  handleDeleteRecord(event) {\r\n    event.preventDefault();\r\n    RecordsAPI.remove(this.props.record.id).then(\r\n      this.props.handleDeleteRecord(this.props.record)\r\n    ).catch(\r\n      error => console.log(error.message)\r\n    )\r\n  }\r\n\r\n  recordRow() {\r\n    return (\r\n      <tr>\r\n        <td>{this.props.record.date}</td>\r\n        <td>{this.props.record.title}</td>\r\n        <td>{this.props.record.amount}</td>\r\n        <td>\r\n          <button className=\"btn btn-info mr-1\" onClick={this.handleToggle.bind(this)}>Edit</button>\r\n          <button className=\"btn btn-danger mr-1\" onClick={this.handleDeleteRecord.bind(this)}>Delete</button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  recordForm() {\r\n    return (\r\n      <tr>\r\n        <td><input type=\"\" className=\"form-control\" defaultValue={this.props.record.date} ref=\"date\"></input></td>\r\n        <td><input type=\"\" className=\"form-control\" defaultValue={this.props.record.title} ref=\"title\"></input></td>\r\n        <td><input type=\"\" className=\"form-control\" defaultValue={this.props.record.amount} ref=\"amount\"></input></td>\r\n        <td>\r\n          <button className=\"btn btn-info mr-1\" onClick={this.handleEdit.bind(this)}>Update</button>\r\n          <button className=\"btn btn-danger mr-1\" onClick={this.handleToggle.bind(this)}>Cancel</button>\r\n        </td>\r\n      </tr>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    if (this.state.edit) {\r\n      return this.recordForm();\r\n    } else {\r\n      return this.recordRow();\r\n    }\r\n  }\r\n}\r\n\r\nRecord.propTypes = {\r\n  id: PropTypes.string,\r\n  date: PropTypes.string,\r\n  title: PropTypes.string,\r\n  amount: PropTypes.number\r\n}\r\n","import React, { Component } from 'react';\r\nimport * as RecordsAPI from '../utils/RecordsAPI'\r\n\r\nexport default class RecordFrom extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      date: \"\",\r\n      title: \"\",\r\n      amount: \"\"\r\n    }\r\n  }\r\n\r\n  handleChange(event) {\r\n    let name, obj;\r\n    name = event.target.name;\r\n    this.setState((\r\n      obj = {},\r\n      obj[\"\" + name] = event.target.value,\r\n      obj\r\n    ))\r\n  }\r\n\r\n  valid() {\r\n    return this.state.date && this.state.title && this.state.amount\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    const data = {\r\n      date: this.state.date,\r\n      title: this.state.title,\r\n      amount: Number.parseInt(this.state.amount, 0)\r\n    }\r\n\r\n    RecordsAPI.create(data).then(\r\n      response => {\r\n        this.props.handleNewRecord(response.data);\r\n        this.setState({\r\n          date: \"\",\r\n          title: \"\",\r\n          amount: \"\"\r\n        })\r\n      }\r\n    ).catch(\r\n      error => console.log(error.message)\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"form-inline mb-3\" onSubmit={this.handleSubmit.bind(this)}>\r\n        <div className=\"form-group mr-3\">\r\n          <input type=\"text\" className=\"form-control\" onChange={this.handleChange.bind(this)}\r\n                 placeholder=\"Date\" name=\"date\" value={this.state.date}></input>\r\n        </div>\r\n        <div className=\"form-group mr-3\">\r\n          <input type=\"text\" className=\"form-control\" onChange={this.handleChange.bind(this)}\r\n                 placeholder=\"Title\" name=\"title\" value={this.state.title}></input>\r\n        </div>\r\n        <div className=\"form-group mr-3\">\r\n          <input type=\"text\" className=\"form-control\" onChange={this.handleChange.bind(this)}\r\n                 placeholder=\"Amount\" name=\"amount\" value={this.state.amount}></input>\r\n        </div>\r\n        <button className=\"btn btn-primary\" disabled={!this.valid()}>添加记录</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst AmountBox = ({text, type, amount}) => {\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"card\">\r\n        <div className={`card-header bg-${type} text-white`}>{text}</div>\r\n        <div className=\"card-body\">{amount}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AmountBox\r\n","import React, { Component } from 'react';\r\nimport Record from './Record';\r\nimport RecordForm from './RecordForm'\r\nimport AmountBox from './AmountBox'\r\nimport * as RecordsAPI from '../utils/RecordsAPI'\r\n\r\nexport default class Records extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      error: null,\r\n      isLoad: false,\r\n      records: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    RecordsAPI.getAll().then(\r\n      response => this.setState({\r\n        records: response.data,\r\n        isLoad: true\r\n      }),\r\n    ).catch(\r\n      error => this.setState({\r\n        isLoad: true,\r\n        error\r\n      })\r\n    )\r\n  }\r\n\r\n  addRecord(record) {\r\n    this.setState({\r\n      error: null,\r\n      isLoad: true,\r\n      records: [\r\n        ...this.state.records,\r\n        record\r\n      ]\r\n    })\r\n  }\r\n\r\n  updateRecord(record, data) {\r\n    const recordIndex = this.state.records.indexOf(record);\r\n    const newRecords = this.state.records.map((item, index) => {\r\n      if (index !== recordIndex) {\r\n        return item;\r\n      }\r\n      return {\r\n        ...item,\r\n        ...data\r\n      };\r\n    });\r\n    this.setState({\r\n      records: newRecords\r\n    })\r\n  }\r\n\r\n  deleteRecord(record) {\r\n    const recordIndex = this.state.records.indexOf(record);\r\n    const newRecords = this.state.records.filter((item, index) => index !== recordIndex)\r\n    this.setState({\r\n      records: newRecords\r\n    })\r\n  }\r\n\r\n  credits(){\r\n    let credits = this.state.records.filter((record) => {\r\n      return record.amount >= 0;\r\n    })\r\n    return credits.reduce((prev, curr) => {\r\n      return prev + Number.parseInt(curr.amount, 0)\r\n    }, 0)\r\n  }\r\n\r\n  debits() {\r\n    let credits = this.state.records.filter((record) => {\r\n      return record.amount < 0;\r\n    })\r\n    return credits.reduce((prev, curr) => {\r\n      return prev + Number.parseInt(curr.amount, 0)\r\n    }, 0)\r\n  }\r\n\r\n  balance() {\r\n    return this.credits() + this.debits();\r\n  }\r\n\r\n  render() {\r\n    const { error, isLoad, records } = this.state;\r\n    let recordsComponent;\r\n\r\n    if (error) {\r\n      recordsComponent = <div>Error: {error.message}</div>;\r\n    }else if (!isLoad) {\r\n      recordsComponent =  <div>Loading...</div>;\r\n    } else {\r\n      recordsComponent = (\r\n        <table className=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>Date</th>\r\n              <th>Title</th>\r\n              <th>Amount</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {records.map((record) =>\r\n              <Record\r\n                key={record.id}\r\n                record={record}\r\n                handleEditRecord={this.updateRecord.bind(this)}\r\n                handleDeleteRecord={this.deleteRecord.bind(this)}\r\n              />\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"mt-3 ml-3 mr-3\">\r\n        <h2 className=\"mb-3\">个人财务收支账单</h2>\r\n        <div className=\"row mb-3\">\r\n          <AmountBox text=\"Credit\" type=\"success\" amount={this.credits()}/>\r\n          <AmountBox text=\"Debit\" type=\"danger\" amount={this.debits()}/>\r\n          <AmountBox text=\"Balance\" type=\"info\" amount={this.balance()}/>\r\n        </div>\r\n        <RecordForm handleNewRecord={this.addRecord.bind(this)}/>\r\n        {recordsComponent}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Records from './compoents/Records';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Records />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}